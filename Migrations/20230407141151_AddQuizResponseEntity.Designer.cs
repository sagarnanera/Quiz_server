// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quiz_server.DBcontext;

#nullable disable

namespace Quiz_server.Migrations
{
    [DbContext(typeof(QuizGameDbContext))]
    [Migration("20230407141151_AddQuizResponseEntity")]
    partial class AddQuizResponseEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Quiz_server.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(5)")
                        .HasColumnName("questionID");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("correctAnswer");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("createdOn")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("options");

                    b.Property<float>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("points")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("QuestionString")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("questionString");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int(2)")
                        .HasColumnName("questionType");

                    b.Property<int>("QuizId")
                        .HasColumnType("int(11)")
                        .HasColumnName("quizID");

                    b.HasKey("QuestionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "QuizId" }, "quizID");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Quiz_server.Models.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("quizID");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdOn")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("endDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isActive");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("quizName");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("startDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("userID");

                    b.HasKey("QuizId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "userID");

                    b.ToTable("Quizzes", (string)null);
                });

            modelBuilder.Entity("Quiz_server.Models.QuizResponse", b =>
                {
                    b.Property<int>("resID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("resID");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int(11)")
                        .HasColumnName("questionID");

                    b.Property<int>("QuizID")
                        .HasColumnType("int(11)")
                        .HasColumnName("quizID");

                    b.Property<DateTime>("ResponseTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ResponseTime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("UserID")
                        .HasColumnType("int(11)")
                        .HasColumnName("userId");

                    b.Property<string>("UserResponse")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("userResponse");

                    b.HasKey("resID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "QuestionID" }, "questionId");

                    b.HasIndex(new[] { "QuizID" }, "quizId");

                    b.HasIndex(new[] { "UserID" }, "userId");

                    b.ToTable("QuizResponse", (string)null);
                });

            modelBuilder.Entity("Quiz_server.Models.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("scoreID");

                    b.Property<int>("Attempts")
                        .HasColumnType("int(11)")
                        .HasColumnName("attempts");

                    b.Property<int>("QuizId")
                        .HasColumnType("int(11)")
                        .HasColumnName("quizID");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("userId");

                    b.Property<float>("userScore")
                        .HasColumnType("float")
                        .HasColumnName("Score");

                    b.HasKey("ScoreId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "QuizId" }, "quizId")
                        .HasDatabaseName("quizId1");

                    b.HasIndex(new[] { "UserId" }, "userId")
                        .HasDatabaseName("userId1");

                    b.ToTable("Scores", (string)null);
                });

            modelBuilder.Entity("Quiz_server.Models.User", b =>
                {
                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("userId");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("time")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("UserName");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserName" }, "UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Quiz_server.Models.Question", b =>
                {
                    b.HasOne("Quiz_server.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_question_id");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Quiz_server.Models.Quiz", b =>
                {
                    b.HasOne("Quiz_server.Models.User", "User")
                        .WithMany("Quizzes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user_quiz_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_server.Models.QuizResponse", b =>
                {
                    b.HasOne("Quiz_server.Models.Question", "Question")
                        .WithMany("QuizResponses")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_response_id");

                    b.HasOne("Quiz_server.Models.Quiz", "Quiz")
                        .WithMany("QuizResponses")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_response_id");

                    b.HasOne("Quiz_server.Models.User", "User")
                        .WithMany("QuizResponses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_response_id");

                    b.Navigation("Question");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_server.Models.Score", b =>
                {
                    b.HasOne("Quiz_server.Models.Quiz", "Quiz")
                        .WithMany("Scores")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_score_id");

                    b.HasOne("Quiz_server.Models.User", "User")
                        .WithMany("Scores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_score_id");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_server.Models.Question", b =>
                {
                    b.Navigation("QuizResponses");
                });

            modelBuilder.Entity("Quiz_server.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizResponses");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Quiz_server.Models.User", b =>
                {
                    b.Navigation("QuizResponses");

                    b.Navigation("Quizzes");

                    b.Navigation("Scores");
                });
#pragma warning restore 612, 618
        }
    }
}
